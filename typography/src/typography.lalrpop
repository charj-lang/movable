use crate::lexer::{Lexer};
use crate::error::{LexicalError, ErrorType};
use crate::location::Location;
use crate::token::Token;
use crate::parse_tree::*;
use string_cache::DefaultAtom as Atom;

grammar<'input>(input: &'input str);

pub Typography: TypoGrammar = {
    GrammarUnit+ => TypoGrammar(<>)
};

GrammarUnit: GrammarUnit = {
    SpecDecl => GrammarUnit::SpecDecl(<>),
    OptionsDecl => GrammarUnit::OptionsDecl(<>),
    NamespaceDecl => GrammarUnit::NamespaceDecl(<>),
    RuleDecl => GrammarUnit::RuleDecl(<>),
};

SpecDecl: Box<SpecDecl> = {
    <l:@L> "spec" "{" "}" <r:@R> => {
        Box::new(SpecDecl {
            location: Location::new(l, r)
        })
    }
};

RuleDecl: Box<RuleDecl> = {
    <l:@L> "rule" <name:Identify> "{" "}" <r:@R> => {
        Box::new(RuleDecl {
            location: Location::new(l, r),
            name
        })
    }
};

OptionsDecl: Box<OptionsDecl> = {
    <l:@L> "options" "{" <properties:(<PropertyDecl>)*> "}" <r:@R> => {
        Box::new(OptionsDecl {
            location: Location::new(l, r),
            properties
        })
    }
};

NamespaceDecl: Box<NamespaceDecl> = {
    <l:@L> "define" "default" "$" <name:Identify> "{" <properties:(<PropertyDecl>)*> "}" <r:@R> => {
        Box::new(NamespaceDecl {
            location: Location::new(l, r),
            scope: Atom::from("default"),
            name,
            properties
        })
    },
    <l:@L> "define" <scope:Identify> "$" <name:Identify> "{" <properties:(<PropertyDecl>)*> "}" <r:@R> => {
        Box::new(NamespaceDecl {
            location: Location::new(l, r),
            scope,
            name,
            properties
        })
    }
};

Identify: Atom = {
    <i:"Identify"> => Atom::from(i),
}

PropertyDecl: Box<PropertyDecl> = {
    <l:@L> <name:Identify> "->" <pattern:PatternKind> ";"? <r:@R>  => {
        Box::new(PropertyDecl {
            location: Location::new(l, r),
            name,
            pattern
        })
   },
    <l:@L> <name:Identify> ":" <string:Pattern> ";"? <r:@R>  => {
        let pattern = PatternKind::Pattern(string);
        Box::new(PropertyDecl {
            location: Location::new(l, r),
            name,
            pattern
        })
   },
    <l:@L> <name:Identify> ":" <string:"StringLiteral"> ";"? <r:@R>  => {
        let pattern = PatternKind::Pattern(string.to_string());
        Box::new(PropertyDecl {
            location: Location::new(l, r),
            name,
            pattern
        })
   },
   <l:@L> <name:Identify> "{" <properties:(<PropertyDecl>)*> "}" <r:@R>  => {
        let cloned_name = name.clone();
        Box::new(PropertyDecl {
            location: Location::new(l, r),
            name,
            pattern: PatternKind::LocalScope(LocalScopeDecl {
                scope: cloned_name,
                properties
            })
        })
   }
};

PatternKind: PatternKind = {
    <c:"CharLiteral"> => PatternKind::CharLiteral(Atom::from(c)),
    <c:"StringLiteral"> => PatternKind::StringLiteral(Atom::from(c)),
    <c:VariablePattern> => PatternKind::VariablePattern(c),
};

VariablePattern: VariablePattern = {
    <l:@L> "@" <name:Identify> <ebnf_suffix: EbnfSuffix?> <r:@R>  => {
        VariablePattern {
            name,
            ebnf_suffix
        }
    },
}

EbnfSuffix: EbnfSuffix = {
    <c:"*"> => EbnfSuffix::STAR(),
    <c:"?"> => EbnfSuffix::QUESTION(),
    <c:"+"> => EbnfSuffix::PLUS(),
}

LexerBlock: LexerBlock = {
    <l:@L> "(" ")" <r:@R>  => {
        LexerBlock::PlaceHolder()
    }
}

Pattern: String = <lo:@L> <s:"Pattern"> =>? {
    Ok(s.to_string())
};

StringLiteral: Atom = <lo:@L> <s:"StringLiteral"> =>? {
    Ok(Atom::from(s))
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        "Identify" => Token::Identify(<&'input str>),
        "StringLiteral" => Token::StringLiteral(<&'input str>),
        "CharLiteral" => Token::CharLiteral(<&'input str>),
        "Pattern" => Token::Pattern(<&'input str>),

        ";" => Token::Semicolon,
        "{" => Token::OpenCurlyBrace,
        "}" => Token::CloseCurlyBrace,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "=" => Token::Assign,
        "=>" => Token::Arrow,
        "->" => Token::ArrowAssign,
        ">" => Token::Less,
        "?" => Token::Question,
        ":" => Token::Colon,
        "+" => Token::Add,
        "-" => Token::Subtract,
        "*" => Token::Mul,
        "/" => Token::Divide,
        "%" => Token::Modulo,
        "!" => Token::Not,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "." => Token::Member,
        ".." => Token::Range,
        "," => Token::Comma,
        "$" => Token::Dollar,
        "@" => Token::At,

        "spec" => Token::Spec,
        "options" => Token::Options,
        "define" => Token::Define,
        "typo"  => Token::Typo,
        "default"  => Token::Default,
        "rule"  => Token::Tokenizer,
        "node"  => Token::Node,
        "ast"  => Token::Ast,
        "template"  => Token::Template,
        "impl"  => Token::Impl,
    }
}
