// inspired by fall & antlr
// ruleset C.movable

options {
  // todo: design builtin
  // builtin -> c.builtin.tg
  // name  -> 'C'
  // extensions -> ".c" | ".h"
}

// lexer
define default$tokenizer {
  identifier: [a-zA-Z_];
  string: "[a-zA-Z_]";

  // default ?
  type {
    int -> "int";
    string -> "string";
  }

  parameters -> @type @identifier (',' @type @identifier)?;
  variables -> @identifier (',' @identifier)?;
}

tokenizer extends default$tokenizer {
  contextual$node 'node';
  contextual$class 'class';

  // delimiters
  raw_string -> '"';
  end_line -> ';';
  dot -> '.';
  gt -> '>';
  lt -> '<';
}

rule import {
  '#' 'include' '<' identifier '>'
| '#' 'include' '<' identifier @DOT 'h' '>'
}

rule function {
  @type @name '(' @parameters ')' '{' @block '}'
}

rule block {
  @expr+
}

rule expr {
  @call '(' ')'  @end_line | @return int @end_line
}

// inspired by fall
// todo: for code generate only
ast {
  node parameters {
    parameters parameter*
  }

  node parameter {
    name ident.text
  }
}

typo {
  import {
     template: '#' 'include'
     impl: 'punctuation.definition.directive.c' 'meta.preprocessor.include.c'
  }
  template.source {
    'punctuation.definition.string.begin.c' identifier 'punctuation.definition.string.end.c'
  }
  function {

  }
}
