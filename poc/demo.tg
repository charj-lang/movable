// inspired by fall & antlr
// ruleset C.movable

options {
  // todo: design builtin
  // builtin = c.builtin.tg
  // name: 'C'
  // extensions: ['.c', '.h']
}

// lexer
default {
  identifier -> [a-zA-Z_];

  type {
    int: int,
    string: string
  }

  parameters -> @type @identifier (',' @type @identifier)?;
}

tokenizer {
  #[contextual]$node 'node'

  // delimiters
  raw_string -> '"""'
  end_line -> ';'
  dot -> '.'
  gt -> '>'
  lt -> '<'
}

rule template$import {
  '#' 'include' '<' identifier '>'
| '#' 'include' '<' identifier @DOT 'h' '>'
}

rule function {
  @type @name '(' @parameters ')' '{' @block '}'
}

rule block {
  @expr+
}

rule expr {
  @call '(' ')'  @end_line | @return int @end_line
}

// inspired by fall
// todo: for code generate only
ast {
  node parameters {
    parameters parameter*
  }

  node parameter {
    name ident.text
  }
}

typo {
  impl$import {
     template: '#' 'include'
     impl: 'punctuation.definition.directive.c' 'meta.preprocessor.include.c'
  }
  impl$template.source {
    'punctuation.definition.string.begin.c' identifier 'punctuation.definition.string.end.c'
  }
  impl$function {

  }
}
