// ruleset C.movable

type$int -> int;
type$string -> string;

default$identifier -> [a-zA-Z_] ;
default$parameters -> @type @identifier (',' @type @identifier)?;

spec {
//  name: 'C'
//  extensions: ['.c', '.h']
}

// delimiters
symbol$raw_string -> '"""'
symbol$end_line -> ';'
symbol$DOT -> '.'
symbol$GT -> '>'
symbol$LT -> '<'

template$import
    : '#' 'include' '<' identifier '>'
    | '#' 'include' '<' identifier @DOT 'h' '>'
    ;

// or

template$import#1 -> '#' 'include' '<' identifier '>'
template$import#2 -> '#' 'include' '<' identifier @DOT 'h' '>'

function: @type @name '(' @parameters ')' '{' @block '}'

block: @expr+

expr
  : @call '(' ')'  @end_line
  | @return int @end_line

impl c.movable

impl$import -> 'punctuation.definition.directive.c' 'meta.preprocessor.include.c'
impl$template.source -> 'punctuation.definition.string.begin.c' identifier 'punctuation.definition.string.end.c'

impl$function ->
